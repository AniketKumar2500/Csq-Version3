import mainutils

# *******************Section-->Exceptions*****************
//overloadings of raise function

def raise(exception::KeyError ke){
    ke.getError()
}
def raise(exception::MemoryEstrangementError e){
    e.getError()
}
def raise(exception::IndexBoundError ibe){
    ibe.getError()
}
def raise(exception::ValueError ve){
    ve.getError()
}

#This function will return the memory address of an object.
def id(void* add){
    return (long int)(add)
}

#This function will return an array which could be iterated using for loop.
def range(int start, int lim, int step = 1){
    array<int> res
    for int i = start; i < lim; i+=step so
        res += i
    ends
    return res
}

def range(int lim, int step = 1){
    array<int> res
    for int i = 0; i < lim; i+=step so
        res += i
    ends
    return res
}

////////////////////////String conversion utils////////
def tostr(int num){
    return to_str(num)
}
def tostr(double num){
    return to_str(num)
}
def tostr(str s){
    return to_str(s)
}
def tostr(array<int> arr){
    str s = "[ "
    for int i : arr so
        s += tostr(i)
        s += ", "
    ends
    return s+"]"
}
def tostr(array<str> arr){
    str s = "[ "
    for str i : arr so
        s += "\""
        s += tostr(i)
        s += "\", "
    ends
    return s+"]"
}
def tostr(array<double> arr){
    str s = "[ "
    for double i : arr so
        s += to_str(i)
        s += ", "
    ends
    return s+"]"
}
def tostr(dict<str,str> d){
    str s
    for var key : d.keys so
        s += tostr(key) + " : "
        s += tostr(d[key]) + ", "
    ends
    return s
}
def tostr(dict<str,int> d){
    str s
    for var key : d.keys so
        s += tostr(key) + " : "
        s += tostr(d[key]) + ", "
    ends
    return s
}
def tostr(dict<str,double> d){
    str s
    for var key : d.keys so
        s += tostr(key) + " : "
        s += tostr(d[key]) + ", "
    ends
    return s
}

def tostr(dict<int,str> d){
    str s
    for var key : d.keys so
        s += tostr(key) + " : "
        s += tostr(d[key]) + ", "
    ends
    return s
}
def tostr(dict<int,int> d){
    str s
    for var key : d.keys so
        s += tostr(key) + " : "
        s += tostr(d[key]) + ", "
    ends
    return s
}
def tostr(dict<int,double> d){
    str s
    for var key : d.keys so
        s += tostr(key) + " : "
        s += tostr(d[key]) + ", "
    ends
    return s
}

def tostr(dict<double,str> d){
    str s
    for var key : d.keys so
        s += tostr(key) + " : "
        s += tostr(d[key]) + ", "
    ends
    return s
}
def tostr(dict<double,int> d){
    str s
    for var key : d.keys so
        s += tostr(key) + " : "
        s += tostr(d[key]) + ", "
    ends
    return s
}
def tostr(dict<double,double> d){
    str s
    for var key : d.keys so
        s += tostr(key) + " : "
        s += tostr(d[key]) + ", "
    ends
    return s
}

//////////////////////// Smart Pointers ////////////
template<typename T>class SmartPtr go
    public:
        T* ptr;
        int free_call = 0;
        SmartPtr() go
            
        ends
        SmartPtr(T* ptr) go
            this->ptr = ptr;
        ends
        SmartPtr(T v){
            this->ptr = new T(v);
        }
        meth free(){
            free_call=1;
            delete this->ptr;
        }
        
        //This method is used to allocate the memory.
        meth allocate(T val){
            free_call = 0;
            // delete ptr;
            this->ptr = new T(val);
        }
        ~SmartPtr(){
            if(free_call == 0){
                // char buffer[10];
                // char *ptr = new char[20];
                printf("Memory not is not deallocated so deallocating it at : ")
                printf("\033[31m%p\033[0m\n",this->ptr);
                delete ptr; 
            }
        }
ends

//////////////////////// IO ////////////////////////

#Print function
template<typename T> def print(T t){
    printf("%s",tostr(t).Str);
}
template<typename T, typename... Args> def print(T t, Args... params){
    printf("%s",tostr(t).Str);
    print(params...)
}
#Println function
template<typename T> def println(T t){
    printf("%s\n",tostr(t).Str);
}
template<typename T, typename... Args> def println(T t, Args... params){
    printf("%s\n",tostr(t).Str);
    print(params...)
}

//Function to take input
def input(str prompt = ""){
    printf("%s",prompt.Str)
    char i[900000]
    scanf("%[^\n]s",i)
    return str(i)
}
